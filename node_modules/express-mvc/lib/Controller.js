/**
 *
 * @authors 熊洋 (xywindows@gmail.com)
 * @date    2014-06-24 20:09:09
 * @description 控制器
 */
var util = require('util'),
  path = require('path'),
  ObjectUtil = require('./ObjectUtil'),
  statics = {}, //静态成员
  proto,
  key,
  method,
  Controller;

Controller = module.exports = function() {
  this.init.apply(this, arguments);
}

proto = {

  /**
   * 初始化器
   * @param  {Request}      request         请求信息
   * @param  {Response}     response        响应信息
   * @param  {Object}       routeData       路由数据
   */
  init: function(request, response, routeData) {
    var me = this;

    me.routeData = routeData;
    me.request = request;
    me.response = response;
    me.queryParam = request.query;
    me.bodyParam = request.body;
  },

  /**
   * 调用控制器上的action执行请求
   */
  execute: function() {
    var me = this,
      routeData = me.routeData,
      actionName = routeData.getActionName(),
      action = me.actions[actionName],
      method = me.request.method,
      action, handler;

    if (action && (handler = action[method] || action['*'])) {

      handler.call(me);

    } else {
      //如果action 或handler不存在  走404国际路线
      me.response.send(404,
        'Controller:' +
        routeData.getControllerName() +
        ' not define Action:' +
        actionName +
        ' method:' + method);
    }
  }

};


method = {
  'json': 'json',
  'file': 'sendfile',
  'send': 'send'
};

/*
  短方法
  this.response.json(obj)=>this.jsonResult(obj);
  this.response.sendfile('...')=>this.fileResult('....')
*/
for (key in method) {
  proto[key + 'Result'] = (function(m) {
    return function() {
      var response = this.response;

      response[m].apply(response, arguments);
    }
  })(method[key]);
}


ObjectUtil.extend(Controller.prototype, proto);



/**
 * 定义一个控制器类型
 * @param  {Controller}     baseController        基类控制器（可选）
 * @param  {Object}         proto                 原型链
 */
statics.define = function( /*optinal*/ baseController, proto) {
  //参数整理
  if (ObjectUtil.isObject(baseController)) {
    proto = baseController;
    baseController = undefined;
  }

  //如果没有传入父类控制器 默认为调用的Controller
  if (baseController == undefined) {
    baseController = this;
  } 
  //如果基类控制器为原型链对象
  else if (ObjectUtil.isObject(baseController)) {
    proto = baseController;
    baseController = this;
  }

  function klass() {
    this.init.apply(this, arguments);
  }

  if (baseController) {
    util.inherits(klass, baseController);
  }

  if (proto) {
    //实例成员
    ObjectUtil.extend(klass.prototype, proto);
  }

  //定义actions缓存
  if (!klass.prototype.actions) {
    klass.prototype.actions = {};
  }

  //静态成员
  ObjectUtil.extend(klass, statics);

  return klass;
}

/**
 * 定义一个Action
 *
 * action结构
 * {
 *   'GET':func,
 *   'POST':func,
 *   '*':func//默认请求处理函数
 * }
 *
 * @param  {String}       actionName      action名称
 * @param  {Function}     handler         处理函数
 * @param  {String}       method            请求方式（POST|GET...，此参数可选 默认为all）
 */
statics.defineAction = function(actionName, handler, /*optinal*/ method) {
  var action,
    actions = this.prototype.actions;

  //整理参数 
  method = method ? method.toUpperCase() : '*';

  if (!(action = actions[actionName]) || //如果action没有在原型链上
    !ObjectUtil.isObject(action)) //如果action不为对象
  {
    action = actions[actionName] = {};
  }

  action[method] = handler;
}

ObjectUtil.extend(Controller, statics);