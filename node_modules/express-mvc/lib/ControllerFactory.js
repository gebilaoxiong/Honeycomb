/**
 *
 * @authors 熊洋 (xywindows@gmail.com)
 * @date    2014-06-24 18:23:03
 * @description 控制器工厂
 *
 * ps:MB的 控制器和路由器怎么能混为一潭
 *   这样做只会让路由器越来越肿胀
 *   同时由于路由规则的增加会降低匹配速度
 *   我们需要ControllerFactory！！
 */
var path = require('path'),
  ObjectUtil = require('./ObjectUtil'),
  RouteData = require('./RouteData'),
  ControllerFactory;


ControllerFactory = module.exports = function(options) {
  var me = this;
  ObjectUtil.extend(this, options);
};


ControllerFactory.prototype = {

  /**
   * 根目录路径
   */
  root: undefined,

  /**
   * 创建一个控制器
   * @param  {Object}             routeData           路由数据
   * @param  {Request}            req                 请求信息
   * @param  {Response}           res                 响应信息
   */
  createController: function(routeData, req, res) {
    var me = this,
      controller = me.loadController(routeData); //获取controller类型 

    if (!controller) {
      return;
    }

    //获取controller类型 
    //实例化
    return new controller(req, res, routeData);
  },

  loadController: function(routeData) {
    var me = this,
      controllerPath = path.join(me.root, routeData.getControllerPath());

    return require(path.relative(__dirname, controllerPath));
  },

  /**
   * 注册由工厂处理的路由规则
   * @param  {Application}        app                 Application实例
   * @param  {String}             routeRule           路由规则
   * @param  {Object|Type}        routeDataConfig     路由数据配置或路由数据类型
   */
  register: function(app, routeRule, routeDataConfig) {
    var me = this,
      routeDataType, error;

    //如果传入的是路由数据配置
    if (ObjectUtil.isObject(routeDataConfig)) {

      routeDataType = RouteData.define(routeDataConfig);

    }
    //传入的是类型
    else if (ObjectUtil.isFunction(routeDataConfig)) {

      routeDataType = routeDataConfig;

    } else {
      throw new Error('routeDataConfig 无效')
    }

    //注册路由规则
    //通过闭包实现路由规则-》RouteData的映射
    app.all(routeRule, function(request, response) {
      var routeData, controller;

      routeData = new routeDataType(request.params);
      controller = me.createController(routeData, request, response);

      //如果定义了控制器
      //且为IController接口
      if (controller && controller.execute) {

        return controller.execute();

      }
      //控制器找不到或者找到的不是控制器 这就逗比了
      //直接404
      else {
        return response.send('404', 'Not find Controller:' + routeData.getControllerName());
      }

    });

    return this;
  }
}