/**
 *
 * @authors 熊洋 (xywindows@gmail.com)
 * @date    2014-06-26 21:26:24
 * @description
 */
var ObjectUtil = require('./ObjectUtil'),
  StringUtil = require('./StringUtil'),
  Filter;

Filter = module.exports = {};

/**
 * 将过滤数据转换为函数
 * @param  {Array||Object}      conditions       过滤条件
 *
 * 格式:
 * {
 *   property:'xxx.xxx',        属性名称
 *   value:123,                 值
 *   operator:'>'               比较操作符（可选）
 * }
 */
Filter.decode = function(conditions) {
  if (!conditions) {
    return;
  }

  //参数为单个排序对象
  if (ObjectUtil.isObject(conditions)) {
    conditions = [conditions];
  }

  //映射为函数
  conditions = conditions.map(function(item) {
    return Filter.createFilter(item);
  });

  return function(dataItem) {
    //是否满足所有条件
    return conditions.every(function(condition) {
      return condition(dataItem);
    });
  }
}

/**
 * 创建一个过滤函数
 * @param  {Object}       condition       过滤条件
 */
Filter.createFilter = function(condition) {
  var propExtractor;

  //condition无意义返回true
  if (!condition ||
    condition.value == undefined || //值为空
    !condition.property) //属性名木有
  {
    return trueFilter;
  }

  //属性值提取函数
  propExtractor = ObjectUtil.buildPropExtractor(condition.property);

  return condition.operator && condition.operator.length ?
    //操作符过滤器
    Filter.buildOperatorFilter(propExtractor, condition.operator, condition.value) :
    //值过滤器
    Filter.buildValueFilter(propExtractor, condition.value);

}

/**
 * 创建一个操作符过滤器
 * @param  {Function}     propExtractor   属性值提取函数
 * @param  {String}       operator        操作符
 * @param  {*}            value           符合条件的值
 */
Filter.buildOperatorFilter = function(propExtractor, operator, value) {
  return function(data) {
    var propVal = propExtractor(data),
      ret;

    //可以隐式转换的
    if (propVal == value) {
      return true;
    }

    propVal = ObjectUtil.coerce(propVal, value);

    switch (operator) {
      case '<':
        ret = propVal < value;
        break;
      case '<=':
        ret = propVal <= value;
        break;
      case '=':
        ret = propVal == value;
        break;
      case '>':
        ret = propVal > value;
        break;
      case '>=':
        ret = propVal >= value;
        break;
      case '!=':
        ret = propVal != value;
        break;
      default:
        ret = true;
    }

    return ret;
  }
}

/**
 * 创建一个值提取器
 * @param  {Function}     propExtractor   属性值提取函数
 */
Filter.buildValueFilter = function(propExtractor, value) {
  //生成一个匹配正则
  var matchExp = new RegExp(StringUtil.escapeRegExp(value));

  return function(data) {
    var propVal = String(propExtractor(data));

    return matchExp.test(propVal);
  }
}

function trueFilter() {
  return true;
}