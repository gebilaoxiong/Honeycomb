/**
 *
 * @authors 熊洋 (xywindows@gmail.com)
 * @date    2014-06-25 01:40:34
 * @description 路由器数据
 */
var ObjectUtil = require('./ObjectUtil'),
  StringUtil = require('./StringUtil'),
  path = require('path'),
  util = require('util'),
  RouteData, proto;


/**
 * 构造函数
 * @param {Object}      params      请求的参数
 */
RouteData = module.exports = function() {
  var me = this;

  me.defaults = {};

  me.init.apply(me, arguments);
}

proto = {
  //控制器名称属性
  controllerProp: 'controller',

  //action名称属性
  actionProp: 'action',

  //控制器的目录
  dir: 'controllers',

  /**
   * 后缀
   * @type {String}
   */
  postfix: '.js',

  pathFormat: undefined,

  /**
   * 参数的默认值
   */
  defaults: undefined,

  /**
   * 初始化
   */
  init: function(params) {
    var me = this,
      controllerProp = me.controllerProp,
      controllerName;

    me.routeParams = ObjectUtil.applyIf(params, me.defaults);

    me.buildControllerPath = ObjectUtil.formatter(me.pathFormat, true);

    //控制器名称
    controllerName = me.routeParams[controllerProp];
    
    //如果控制器名称不是
    if (!StringUtil.endWith(me.routeParams[controllerProp], 'Controller')) {
      me.routeParams[controllerProp] += 'Controller';
    }

  },

  /**
   * 获取控制器名称
   */
  getControllerName: function() {
    var me = this;
    return me.routeParams[me.controllerProp];
  },

  /**
   * 获取action名称
   */
  getActionName: function() {
    var me = this;
    return me.routeParams[me.actionProp];
  },

  /**
   * 获取控制器路径
   */
  getControllerPath: function() {
    var me = this;

    return path.join(me.dir, me.buildControllerPath(me.routeParams));
  },

  /**
   * 获取路由参数
   */
  getRouteParam: function() {
    return this.routeParams;
  }
}

ObjectUtil.extend(RouteData.prototype, proto);

/**
 * 定义一个路由数据类型
 * @param  {RouteDataType}     baseController        基类路由数据（可选）
 * @param  {Object}            proto                 原型链
 */
RouteData.define = function( /*optinal*/ baseRouteDataType, proto) {
  //参数整理
  if (ObjectUtil.isObject(baseRouteDataType)) {
    proto = baseRouteDataType;
    baseRouteDataType = undefined;
  }

  //如果没有传入父类 默认为调用的类型
  if (baseRouteDataType == undefined) {
    baseRouteDataType = this;
  }

  function klass() {
    this.init.apply(this, arguments);
  }

  if (baseRouteDataType) {
    util.inherits(klass, baseRouteDataType);
  }

  //实例成员
  ObjectUtil.extend(klass.prototype, proto);


  return klass;
}