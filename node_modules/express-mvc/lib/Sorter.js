/**
 *
 * @authors 熊洋 (xywindows@gmail.com)
 * @date    2014-06-26 16:19:26
 * @description 排序
 */
var ObjectUtil = require('./ObjectUtil'),
  Sorter;

Sorter = module.exports = {};

/**
 * 将sorters解析为排序函数
 * @param  {Array|Object}     sorters     排序对象
 *
 * 格式:
 * {
 *   property:'属性名',
 *   direction:'ASC'
 * }
 */
Sorter.decode = function(sorters) {
  //如果参数为空 
  if (sorters == undefined) {
    return;
  }

  if (ObjectUtil.isObject(sorters)) {
    sorters = [sorters];
  }

  //映射为函数
  sorters = sorters.map(function(item) {
    return Sorter.createSortFn(item.property, item.direction);
  });

  //返回排序函数
  return function(left, right) {
    var ret = 1;

    sorters.forEach(function(sorte) {
      ret = ret | sorte(left, right);
    });

    return ret;
  }
}


/**
 * 创建一个排序的函数
 * @param  {String}     property          属性名
 * @param  {String}     direction         排序方式（ASC:正序,DESC:倒序）
 */
Sorter.createSortFn = function(property, direction) {
  var extract = ObjectUtil.buildPropExtractor(property); //值提取函数

  return direction.toUpperCase() === 'ASC' ?
    function(left, right) {
      left = extract(left);
      right = extract(right);

      return left > right ? 1 : ((left < right) ? -1 : 0);
    } :
    function(left, right) {
      left = extract(left);
      right = extract(right);

      return left > right ? -1 : ((left < right) ? 1 : 0);
    };
}